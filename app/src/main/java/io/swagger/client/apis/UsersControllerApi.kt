/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DetailResponse
import io.swagger.client.models.LoginEmailCodeFormModel
import io.swagger.client.models.LoginEmailFormModel
import io.swagger.client.models.LogoutBodyModel
import io.swagger.client.models.RefreshFirebaseTokenBodyModel
import io.swagger.client.models.RefreshTokenBodyModel
import io.swagger.client.models.TokensResponseModel
import io.swagger.client.models.UserCitiesResponse
import io.swagger.client.models.UserConcertsResponse
import io.swagger.client.models.UserTrackListResponse
import io.swagger.client.models.UserTrackListsResponse

import io.swagger.client.infrastructure.*

class UsersControllerApi(basePath: String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param city  
     * @return DetailResponse
     */
    fun addUserCity(city: Any): DetailResponse {
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>().apply {
            put("city", listOf(city.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/users/cities", query = localVariableQuery
        )
        val response = request<DetailResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param url  
     * @return UserTrackListResponse
     */
    fun addUserTrackList(url: Any): UserTrackListResponse {
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>().apply {
            put("url", listOf(url.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/users/track-lists", query = localVariableQuery
        )
        val response = request<UserTrackListResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserTrackListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param city  
     * @return DetailResponse
     */
    fun deleteUserCity(city: Any): DetailResponse {
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>().apply {
            put("city", listOf(city.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/users/cities", query = localVariableQuery
        )
        val response = request<DetailResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param url  
     * @return DetailResponse
     */
    fun deleteUserTrackList(url: Any): DetailResponse {
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>().apply {
            put("url", listOf(url.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/users/track-lists", query = localVariableQuery
        )
        val response = request<DetailResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return DetailResponse
     */
    fun emailLogin(body: LoginEmailFormModel): DetailResponse {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/users/login"
        )
        val response = request<DetailResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return UserCitiesResponse
     */
    fun getUserCities(): UserCitiesResponse {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users/cities"
        )
        val response = request<UserCitiesResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserCitiesResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return UserConcertsResponse
     */
    fun getUserConcerts(): UserConcertsResponse {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users/concerts"
        )
        val response = request<UserConcertsResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserConcertsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return UserTrackListsResponse
     */
    fun getUserTrackLists(): UserTrackListsResponse {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users/track-lists"
        )
        val response = request<UserTrackListsResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserTrackListsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return TokensResponseModel
     */
    fun loginWithEmailCode(body: LoginEmailCodeFormModel): TokensResponseModel {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/users/login"
        )
        val response = request<TokensResponseModel>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TokensResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Accepts both access and refresh tokens and if they are valid, marks them as black-listed (separately).
     * @param body  
     * @return DetailResponse
     */
    fun logout(body: LogoutBodyModel): DetailResponse {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/users/logout"
        )
        val response = request<DetailResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return DetailResponse
     */
    fun putFirebaseToken(body: RefreshFirebaseTokenBodyModel): DetailResponse {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/users/firebase-token"
        )
        val response = request<DetailResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Uses refresh token to get new access and refresh tokens. Marks old refresh token as black-listed until it expires.
     * @param body  
     * @return TokensResponseModel
     */
    fun refresh(body: RefreshTokenBodyModel): TokensResponseModel {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/users/refresh"
        )
        val response = request<TokensResponseModel>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TokensResponseModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
